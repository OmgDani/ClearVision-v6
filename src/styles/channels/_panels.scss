@use "cv"as *;

/* CHANNEL LIST PANELS */
#{cn("FluxContainer(AppView)" panels)} {
	background: transparent;

	> :first-child {
		box-shadow: 0 -2px 10px rgba(0, 0, 0, calc(#{cv("bg.app.shading")} * .3));
	}
}

// BUTTONS
#{cn(PanelButton button)} {
	height: 32px;
	width: 32px;
	opacity: 1;

	&,
	&#{cn(PanelButton enabled)}:hover {
		background: rgba(0, 0, 0, .3);
	}

	&:first-child {
		border-radius: 15px 0 0 15px;
	}

	&:last-child {
		border-radius: 0 15px 15px 0;
	}

	&:only-child {
		border-radius: 15px;
	}

	&:nth-child(n + 2) {
		position: relative;
		margin-left: -1px;

		&:before {
			content: "";
			position: absolute;
			left: 0;
			top: 2px;
			bottom: 2px;
			width: 1px;
			background: hsla(0, 0%, 100%, .2);
		}
	}

	>#{cn(ButtonLink contents)}>svg {
		@include bg($rep: no-repeat, $pos: center, $size: 18px);
		color: #fff;
		opacity: .3;
		transition: all .1s ease-in-out;
	}
	&:hover>#{cn(ButtonLink contents)}>svg {
		opacity: .7;
	}

	&#{cn(PanelButton disabled)} {
		>#{cn(ButtonLink contents)}>svg {
			opacity: .1;
		}
	}
}

#{cn(AccountConnected container)} {
	#{cn(PanelButton button)} {
		&:first-child {
			&[aria-checked=false] {
				svg {
					background-image: url(https://clearvision.gitlab.io/icons/mic.svg);
				}
			}

			&[aria-checked=true] {
				svg {
					background-image: url(https://clearvision.gitlab.io/icons/mic_off.svg);
				}
			}
		}

		&:nth-child(2) {
			&[aria-checked=false] {
				svg {
					background-image: url(https://clearvision.gitlab.io/icons/volume_up.svg);
				}
			}

			&[aria-checked=true] {
				svg {
					background-image: url(https://clearvision.gitlab.io/icons/volume_off.svg);
				}
			}
		}

		&:last-child {
			svg {
				background-image: url(https://clearvision.gitlab.io/icons/settings.svg);
			}

			// FIND FIX FOR TEXT COLOUR 
			&:hover {
				svg {
					animation: cv-spin 2.5s linear infinite;
				}
			}
		}

		svg {
			>path {
				display: none;
			}
		}
	}
}

#{cn("withAnalyticsContext(FluxContainer(RTCConnection))" container)} {
	#{cn(PanelButton button)} {
		&:last-child {
			svg {
				background-image: url(https://clearvision.gitlab.io/icons/call_end.svg);

				>path {
					display: none;
				}
			}
		}
	}
}



// ACCOUNT PANEL
#{cn(AccountConnected container)} {
	position: relative;
	margin-bottom: 10px;

	&:before,
	&:after {
		bottom: -8px;
		position: absolute;
		color: hsla(0, 0%, 100%, .3);
		font-size: 11px;
		font-weight: 700;
		// need hover fix
		transition: all .5s ease-in-out;
	}

	&:before {
		content: cv("const:text.account.main");
		right: 50%;
		text-align: right;
		transform: translateX(50%);
	}

	&:after {
		content: cv("const:text.account.version");
		left: 50%;
		text-align: left;
		opacity: 0;
		transform: translateX(50%) rotateX(90deg);
	}

	&:hover {
		&:before {
			margin-right: 1px;
			transform: none;
		}

		&:after {
			margin-left: 1px;
			opacity: 1;
			transform: none;
		}
	}

	// AVATAR
	#{cn(AccountConnected avatar)} {
		width: 32px !important;
		height: 32px !important;
		transition: all .15s ease-in-out;

		&:after {
			content: "Status";
			position: absolute;
			@include stretch;
			color: #fff;
			font-size: 5px;
			font-weight: 700;
			text-align: center;
			line-height: 32px;
			text-transform: uppercase;
			opacity: 0;
			transition: all .15s ease-in-out;
			pointer-events: none;
		}

		foreignObject {
			transition: all .15s ease-in-out;
		}

		&:hover {
			width: 40px !important;
			height: 40px !important;
			opacity: 1;

			&:after {
				font-size: 10px;
				line-height: 40px;
				opacity: 1;
			}

			foreignObject {
				opacity: .5;
			}
		}
		#{cn(AccountConnected avatarSpeaking)} {
			box-shadow: inset 0 0 0 2px var(--main-color),inset 0 0 0 3px var(--background-secondary);
		}
	}

	// NAME TAG {
	#{cn(PanelTitle title)} {
		color: #fff;
	}

	#{cn(PanelSubtext subtext)} {
		color: hsla(0, 0%, 100%, .3);
	}
}

// CONNECTION PANEL
#{cn("withAnalyticsContext(FluxContainer(RTCConnection))" container)} {
	border-color: transparent;

	#{cn("withAnalyticsContext(FluxContainer(RTCConnection))" inner)} {
		#{cn(RTCConnectionStatus rtcConnectionStatus)} {
			#{cn(RTCConnectionStatus ping)} {
				width: 16px;
				height: 16px;
				margin-right: 3px;
				background-size: 16px;
			}
		}
	}

	#{cn("withAnalyticsContext(FluxContainer(RTCConnection))" channel)} {
		color: hsla(0, 0%, 100%, .3);
		opacity: 1;
		transition: all .15s ease-in-out;

		&:hover {
			color: hsla(0, 0%, 100%, .5);
			text-decoration: none;
		}
	}
}

// VOICE USERS PANEL
#{cn("withAnalyticsContext(FluxContainer(RTCConnection))" speaking)} {
	box-shadow: inset 0 0 0 2px var(--main-color),inset 0 0 0 3px var(--background-secondary);
}



// ACTIVITY PANEL
#{cn("FluxContainer(AppView)" activityPanel)} {
	border-color: transparent;

	#{cn("withAnalyticsContext(FluxContainer(ActivityPanelGameCard))" actions)} {
		background: rgba(0, 0, 0, .3);
		border-radius: 15px;

		> :nth-child(n+2) {
			position: relative;
			margin-left: -1px;

			&:before {
				content: "";
				position: absolute;
				left: 0;
				top: 2px;
				bottom: 2px;
				width: 1px;
				background: hsla(0, 0%, 100%, .2);
			}
		}
	}
}